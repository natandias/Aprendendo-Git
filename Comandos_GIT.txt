git #SETUP
git config --global user.name "seunome"
git config --global user.email "seuemail"
git config --global core.editor "editortxt"

#Listar Configs
//mostra usuario (substitua user.name pela config que quiser)
git config user.name
//lista tudo
git config --list

#Inicializar repositório (pasta)
/*é possível criar a pasta na GUI ou por meio do terminal
criada a pasta, abra o menu de contexto e clique em Git Bash here*/

/*é possível criar pelo terminal
use o comando cd para ir a pasta
mkdir para criar a pasta*/

#Iniciar repositório
Após criar a pasta, dê o comando: git init

#Listar conteúdo da pasta
ls: lista somente arquivos
ls -a: lista arquivos e pastas
ls -l: lista somente arquivos com informações sobre eles
ls -la: combina os outros dois (arquivos, pastas e infos)

#Usando editor externo
/* editor arquivo 
ex: code Readme.md
Abre o arquivo no VsCode */

#Usando editor interno (terminal)
vim Readme.md
i: habilita edição
pressione ESC
:wq 
dê ENTER

Estados do GIT (para ver: git status)
//arquivo foi criado:
Untracked: arquivo foi adicionado, mas ainda não foi 'registrado' no GIT

//após dar git add arquivo (para todos arquivos da pasta: git add -all)
Staged: versão do arquivo é criada

//após dar commit
Unmodified: versão é salva e passa a ser tratada como a original

//após editar 
Modified: a nova versão foi modificada

//dê git add arquivo
Staged: é criada nova versão

//commit (git commit -m "mensagem de log")
Nova versão é salva

//git log
mostra relatório dos commits feitos no repositório

//git log --decorate
log com informações adicionais

//git log --author="nome"
procura commits feitas por determinada pessoa

//git shortlog
log resumido somente com autores e commits

//git shortlog -sn
mostra as pessoas que contribuiram no projeto

//git shortlog -graph
log gráfico

//git show hash_do_commit
mostra dados sobre determinado commit

//git diff
mostra os arquivos modificados e quais as modificações

//git diff --name-only
mostra somente o nome dos arquivos que foram modificados

//git commit -am "log msg"
Adiciona e já comita os arquivos modificados

//dir
mostra os diretórios da local em que o terminal está aberto

//git checkout 
cancela modifições que ainda não foram para staged (não foi feito add ainda)

//git rm -r --cached arquivo
remove arquivos que ainda não foram pro stage

//git reset Head arquivo 
quando o arquivo já está no estado staged mas ainda não foi feito commit 

//git reset --
obs: usa-se hash do commit anterior ao que você quer cancelar, pois o último commit atua como ponteiro

//git reset --soft hash_do_commit.
volta do commit pro staged

//git reset --mixed hash_do_commit
volta do commit pro modified (antes do staged)

//git reset --hard hash_do_commit
desaparece com o commit do mapa

//linkando repositório local ao remoto
git remote add origin link_do_repositorio
git push -u origin master

//enviar atualizações do projeto pro Github
git push

//atualizar o projeto local com o do Github
git pull

//clonando repositório do Github
git clone link_do_repositorio  diretorio_onde_sera_armazenado

//quando você clona o repositório não é possível fazer push se ele não for o seu 

//fork
cria uma cópia exata do projeto original

//não é possível deletar a branch em uso, é necessário ir para outra branch primeiro

//criar branch
git checkout -b nome_do_branch 

//listar branch's existentes
git branch

//remover commits mais antigos sem excluir os mais recentes
git rebase -i HEAD~N

//movimentar entre branches
git checkout nome_do_branch

//deletar branch 
git branch -d nome_do_branch


//Para unir os branches
//merge - é uma operação não destrutiva e cria um commit extra para juntar os branches, cria um árvore com várias bifurcações, bagunça o histórico
git merge nome_do_branch

//rebase - coloca uma branch no ínicio da fila, deixa de forma linear, evita commit extra e mantém o histórico linear, mas perde ordem cronológica
git rebase nome_do_branch
//git pull --rebase (evita mudanças de histórico)

//uso comum:
Quando for atualizar sua branch com master, use rebase.

Quando for introduzir a sua branch no master, use merge.
chame o rebase ou merge na branch que deseja que eles seja, adicionados (geralmente a master).

//git ignore - lista de arquivos que não devem ser upados para o repositório
vim .gitignore
insira os arquivos que devem ser ignorados ou insira as extensões que devem ser ignoradas. ex: senhas.txt ou *.doc

//git stash - guarda modificação enquanto você edita
git stash - pra criar o arquivo
git stash creat 'nome_do_stage' - cria com mensagem
git stash apply - retorna o arquivo guardado
git stash list - mostra o que está guardado
git stash clear - limpa

//alias - atalhos para comandos
git config --global alias.novo_comando comando_a_substituir

//tags - serve para indicar novas versões (releases)
git tag -a nome_da_tag -m "Mensagem"
git push origin master --tags

//apagar tags
git tag  -d nome_Da_tag

//git Revert - cria um novo commit apagando as ultimas alterações mas mantém o commit anterior, diferente do reset que apaga o commit 
git revert hash_do_commit

//recuperar arquivo deletado
git status
git checkout -- nome_do_arquivo_deletado

//apagar tags e branches remotos
git push origin :nome_Da_tag
git push origin :nome_do_Branch






